# Source: https://python.langchain.com/docs/integrations/vectorstores/faiss_async/
from langchain_core.documents import Document
import json
from langchain_community.embeddings.huggingface import HuggingFaceEmbeddings
import numpy as np
from langchain.chains import RetrievalQA
from langchain.chat_models import ChatOpenAI
from langchain.document_loaders import TextLoader
from langchain.vectorstores import DocArrayInMemorySearch
from IPython.display import display, Markdown
from langchain.text_splitter import CharacterTextSplitter
from langchain.embeddings import OpenAIEmbeddings, HuggingFaceInstructEmbeddings
from langchain.vectorstores import FAISS
from langchain.memory import ConversationBufferMemory
from langchain.chains import ConversationalRetrievalChain
from langchain.indexes import VectorstoreIndexCreator
from langchain_experimental.agents.agent_toolkits.csv.base import create_csv_agent
from langchain.agents.agent_types import AgentType
from langchain.memory import ConversationBufferMemory
import tiktoken
from langchain_community.embeddings.huggingface import HuggingFaceEmbeddings
from langchain.text_splitter import CharacterTextSplitter

def parse_pubmed(file_path):

    records = []
    with open(file_path, 'r', encoding='utf16') as file:
        for line in file:
            # print(line)
            records.append(json.loads(line))
    return records


def prepare_rag_corpus(data):
    list_of_documents = []
    for k, v in full_text.items():
        doc = Document(page_content=v['full_text'],metadata=dict(pmid=k))
        list_of_documents.extend(doc)
        if len(list_of_documents) > 100:
            break # Early stopping for testing purposes
    return list_of_documents


# Load documents
pubmed_file = "./data/pubmed_parsed/pubmed.txt"
pubmed_data = parse_pubmed(pubmed_file)
rag_corpus = prepare_rag_corpus(pubmed_data)

# Split documents into chunks
text_splitter = CharacterTextSplitter(chunk_size=1000, chunk_overlap=200)
data = text_splitter.split_documents(data)

# Create a FAISS index
emb_model = HuggingFaceEmbeddings(model_name="all-MiniLM-L6-v2")
#embeddings = model.encode(rag_corpus) 
# dimension = embeddings.shape[1]  
# index = faiss.IndexFlatL2(dimension)
# index.add(embeddings)  # Add the document embeddings to the index
vectorstore = FAISS.afrom_documents(data, embedding=emb_model)

# Save
vectorstore.save_local("pubmed_faiss_index")
#new_db = FAISS.load_local("faiss_index", embeddings, asynchronous=True)
docs = await new_db.asimilarity_search(query)

docs[0]

# Create conversation chain
llm = ChatOpenAI(temperature=0.7, model_name="gpt-4")
memory = ConversationBufferMemory(
memory_key='chat_history', return_messages=True)
conversation_chain = ConversationalRetrievalChain.from_llm(
        llm=llm,
        chain_type="stuff",
        retriever=vectorstore.as_retriever(),
        memory=memory
        )

query = "Which documents are related to cardiovascular disease?"
result = conversation_chain({"question": query})
answer = result["answer"]
print(answer)

# Get embedding of query
#query = "Your query text here"
#query_embedding = model.encode([query])[0]

# Search the FAISS index
#k = 2  # Number of nearest neighbors to retrieve
#D, I = index.search(np.array([query_embedding]), k)  # D: Distances, I: Indices

# Display the most similar documents
#for i in I[0]:
#    print(documents[i])